[{"page_content": "Command Line Language Model (CLLM) Interface\n\nThe Command Line Language Model (CLLM) Interface is a tool designed to facilitate interactions with language models via the command line. It provides various functionalities such as listing available systems and schemas, generating prompts from templates, and validating responses against schemas.\n\nUsage\n\nTo use the CLLM interface, you can run the cllm command followed by the appropriate arguments and options. Below is a detailed explanation of the available commands and options.\n\nCommands\n\nsystems: Lists all available systems.\n\nschemas: Lists all available schemas.\n\nif one of the built-in commands is not found, cllm will attempt to run the command as a system. System configurations are stored in the $CLLM_PATH/systems directory.\n\nFor example if you call.\n\n```\ncllm base \"What is the meaning of life?\"\n\n```\n\ncllm will look for a system configuration in the $CLLM_PATH/systems/base.yml directory.", "metadata": {"source": "docs/cllm.md"}}, {"page_content": "By default cllm expects that a .cllm folder exists in the current working directory. This folder should contain the systems, templates and schemas directories. You can override this by setting the CLLM_PATH environment variable.\n\nSystems Files\n\nThe system files are stored in the $CLLM_PATH/systems directory. The system files are YAML files that contain the configuration for the system.\n\nExample:\n\n$CLLM_PATH/systems/base.yml\n\n```yaml\n\nmodel: gpt-4o\nprovider: openai\ndescription: A basic system. No system prompt is provided.\nsystem_prompt: A system prompt is provided.\ntemperature: 0\n\n```\n\nListing Available Systems\n\nbash\ncllm systems\n\nListing Available Schemas\n\nbash\ncllm schemas\n\nBasic a Prompt Generation\n\nbash\ncllm gpt/3.5 -pi \"Who are the members of the Beatles?\"\n\nPersistent Context\n\nThe --chat-context option can be used to provide a persistent context for the conversation. This context will be carried over between prompts.", "metadata": {"source": "docs/cllm.md"}}, {"page_content": "cllm-repeater: A tool for processing a list of data items by repeatedly invoking the cllm command with specified arguments.\n\ncllm-load-dir: A tool for loading files from a specified directory, splitting them into chunks, and optionally saving the processed data as a JSON file.\n\ncllm-load-sitemap: A script for generating a sitemap from a given URL using Selenium WebDriver.\n\ncllm-load-search-google: A tool for scraping Google search results based on specified queries and parameters.\n\nFor detailed usage instructions and examples, please refer to the individual documentation files for each tool.", "metadata": {"source": "docs/toolkit/README.md"}}, {"page_content": "Read Input Data:\n   The script reads JSON input data from standard input.\n\nProcess Each Item:\n   For each item in the JSON array, the script executes the cllm command with the provided arguments. The item is passed as input to the command.\n\nCapture and Parse Output:\n   The script captures the command output and attempts to parse it as JSON. If parsing fails, the raw output is returned.\n\nHandle Errors:\n   If the cllm command is not found, an error message is appended to the results.\n\nOutput Results:\n   The results are output in JSON format.\n\nExample Output\n\njson\n[\n  {\n    \"key\": \"value1\",\n    \"result\": {\n      \"output_key\": \"output_value1\"\n    }\n  },\n  {\n    \"key\": \"value2\",\n    \"result\": {\n      \"output_key\": \"output_value2\"\n    }\n  }\n]", "metadata": {"source": "docs/toolkit/cllm-repeater.md"}}, {"page_content": "cllm-repeater: A Command-Line Tool for Repeating Commands on JSON Data\n\nOverview\n\ncllm-repeater is a command-line tool designed to execute a specified command (cllm) on each item in a JSON array. The tool reads input data from standard input, processes each item using the cllm command with provided arguments, and outputs the results in JSON format. It handles errors gracefully and attempts to parse the command output as JSON.\n\nFeatures\n\nExecute the cllm command on each item in a JSON array.\n\nCapture and parse the command output as JSON.\n\nHandle errors and provide meaningful error messages.\n\nOutput the results in JSON format.\n\nUsage\n\nTo use cllm-repeater, you need to run the script with the appropriate arguments. Below is the detailed usage information.\n\nCommand-Line Arguments\n\nThe script accepts any arguments that should be passed to the cllm command.\n\nExample Command\n\nbash\necho '[{\"key\": \"value1\"}, {\"key\": \"value2\"}]' | cllm-repeater --arg1 value1 --arg2 value2\n\nDetailed Steps", "metadata": {"source": "docs/toolkit/cllm-repeater.md"}}]
